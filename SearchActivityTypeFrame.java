
package dashboardcw;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abdulrahman Ibrahim
 */
public class SearchActivityTypeFrame extends javax.swing.JFrame {

    /**
     * Creates new form SearchFrame
     */
    public SearchActivityTypeFrame() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        activityTypeTable = new javax.swing.JTable();
        resetButton = new javax.swing.JButton();
        resetButton.setVisible(false);
        userInstructions = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        activityTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "projectRcn", "projectID", "projectAcronym", "role", "id", "name", "shortName", "activityType", "endOfParticipation", "ecContribution", "country", "street", "city", "postCode", "organizationUrl", "vatNumber", "Q"
            }
        ));
        activityTypeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(activityTypeTable);

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        userInstructions.setText("search projects of a specific activity type:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(searchButton)
                        .addGap(28, 28, 28)
                        .addComponent(resetButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(userInstructions)))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(userInstructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(resetButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        //checking if text input by user is an activity type
        if (searchField.getText().toLowerCase().matches("hes") || searchField.getText().toLowerCase().matches("rec") || searchField.getText().toLowerCase().matches("prc") || searchField.getText().toLowerCase().matches("pub") || searchField.getText().toLowerCase().matches("oth")) {
            try {
                String activityType = searchField.getText().toUpperCase();
                Connection connect = My_Database.getConnection();
                PreparedStatement ps = connect.prepareStatement("select * from 5CS03GroupThree where activityType = '" + activityType + "'");
                ResultSet rs = ps.executeQuery();

                //setting the rows of the table with the values from the database
                DefaultTableModel table = (DefaultTableModel) activityTypeTable.getModel();
                Object[] row = new Object[17];
                while (rs.next()) {
                    row[0] = rs.getString(1);
                    row[1] = rs.getString(2);
                    row[2] = rs.getString(3);
                    row[3] = rs.getString(4);
                    row[4] = rs.getString(5);
                    row[5] = rs.getString(6);
                    row[6] = rs.getString(7);
                    row[7] = rs.getString(8);
                    row[8] = rs.getString(9);
                    row[9] = rs.getString(10);
                    row[10] = rs.getString(11);
                    row[11] = rs.getString(12);
                    row[12] = rs.getString(13);
                    row[13] = rs.getString(14);
                    row[14] = rs.getString(15);
                    row[15] = rs.getString(16);
                    row[16] = rs.getString(17);

                    table.addRow(row);

                }
                //making the reset button visible
                resetButton.setVisible(true);

            } catch (SQLException ex) {
                Logger.getLogger(SearchActivityTypeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
            //in case the user presses search without entering any data in the search field
        } else if (searchField.getText().isEmpty()) {
            //showing a message dialogue
            JOptionPane.showMessageDialog(this, "Textfield is empty!");
            //in case the user enters anything not matching the activity types
        } else {
            //showing a message dialogue
            JOptionPane.showMessageDialog(this, "This activity type does not exist!");
        }
    }//GEN-LAST:event_searchButtonActionPerformed
//when the reset button is pressed
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        DefaultTableModel table = (DefaultTableModel) activityTypeTable.getModel();
        table.setRowCount(0);
        //search textfield is emptied
        searchField.setText("");
        //reset button is made invisble
        resetButton.setVisible(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchActivityTypeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchActivityTypeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchActivityTypeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchActivityTypeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchActivityTypeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activityTypeTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel userInstructions;
    // End of variables declaration//GEN-END:variables
}
